## Prep CDS FASTA files to run with OrthoFinder v.2.5.4 (Emms, D. M., & Kelly, S. (2019). OrthoFinder: Phylogenetic orthology inference for comparative genomics. Genome Biology, 20(1), 238. https://doi.org/10.1186/s13059-019-1832-y)

### OrthoFinder reccommends removing the longest transcript. These script find the longest transcript using the annotation file (.gff/.gtf) and then creates a new FASTA file.
### For use with my project, these script allowed me to map the longest transcript ID's with other important information (CDS length, Chromosome/Scaffold location, etc.)

### gff_longestCDSinfo.py

	Run command: $ python3 gff_longestCDSinfo.py [gff file name] [output file name] <br>
	Description: This script identifies the longest CDS transcript from the gff annotation file. For each gene, it builds dictionaries for each mRNA/transcript feature within that gene. If there is more than mRNA, it can determine which mRNA has the longest CDS sequences within it. That one is the longest transcript.

	Output file: This script outputs information valuable for
			1. finding the longest transcript for each gene
			2. determining all the CDS locations for the longest transcript and their corresponding reading frames
				Each CDS has its start and stop as such: "start:stop"
				all the CDS are separated by a ";"
				The reading frame has the same format. 
			3. Outfile file has the following fields:
				gene id: gene that the longest transcript belongs to
				cds id:	cds id for the longest transcript. valuable for finding the gene id in the cds fasta file
				chrom:	chromosome for that particular gene
				pos:	list of CDS positions
				frame:	reading frame for each CDS position

### gtf_longestCDSinfo.py
	Run command: python3 gtf_longestCDSinfo.py [gtf file name] [output file name]
	Description: Runs the same as gff_longestCDSinfo.py but is adjusted for the gtf format. 
	Output file: The same as above. The main difference as that the gene id is not different from the transcript id.

### maps_getlongestcolumn.py
	Run command: python3 maps_getlongestcolumn.py [CDS output map] [output file name]
		Description: Uses string search to pull the second column of the output file created by the previous two script for the CDS ID's. These CDS ID's are used to edit FASTA files.
		Note: I'd like to automate this or add an input to choose the column. I'll have to see how often the second column works.

### auto_gff_getinfo.sh
	Run command: ./auto_gff_getinfo.sh WITHIN DIRECTORY
	Description: Creates multiple CDS maps automatically for a directory of .gff / .gtf files. Must be run inside the directory of interest.
	Output: Creates file names as [.gff/gtf file name.CDS.output]
	Note: The script will find all files that contain .gff or .gtf, so if this is re-run MAKE SURE to delete the CDS.output files.

### auto_create_txlist.sh
	Run command: ./auto_gff_getinfo.sh WITHIN DIRECTORY
	Description: Creates multiple lists of ID's from the second column of CDS.output files created by the above script in the same directory.
	Note: If you don't need the second, run maps_getlongestcolumn.py by hand and edit the string search for a different column number.

### make_new_fastafile.py [Original CDS FASTA File] [List of Longest CDS ID's] [Output file name]

	run command: python3 updateproteome_withxp.py [protein file name] [list of longest transcript XP numbers] [desire output file name]
	Description: Cross references the ID list and the original FASTA file to create a new FASTA file with only the longest transcripts.

### finding_missing_cds.py
	run command: python3 [CDS FASTA input file] [CDS FASTA with only the longest isoforms/transcripts]
	Decription: The script was written for validation of files when the lengths of the output files were not logical. Runs slow, but is good for troubleshooting.
